import tkinter as tk
from tkinter import ttk, messagebox
import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import re

def get_property_info(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"リクエストに失敗しました: {e}")
        return []

    soup = BeautifulSoup(response.content, 'html.parser')

    property_info_list = []

    property_cards = soup.select('ul.ApartmentList_apartment-list__wdh9q li')

    if not property_cards:
        return []

    for card in property_cards:
        name_tag = card.select_one('div.Heading_heading-block__t3e9F h3')
        caption_elements = card.find_all('span', class_='Caption_caption__ex6T_')

        if name_tag and caption_elements:
            name = name_tag.text.strip()
            address = caption_elements[0].text
            station = caption_elements[1].text

            station_name_match = re.search(r'「(.*?)駅」', station)
            if station_name_match:
                station = station_name_match.group(1) + "駅"

            property_info_list.append({
                '物件名称': name,
                '住所': address,
                '最寄り駅': station
            })

    return property_info_list

def main(base_url, progress_bar):
    all_properties = []
    file_count = 1
    total_count = 0
#ページ数＋１をrange(1,x)の右の数値を指定して、ページ指定をしてくださいね！今は３ページ取得（１，4）
    for page_num in range(1, 4):
        progress_bar['value'] = (page_num - 1) * 33
        root.update_idletasks()

        print(f"今データ抽出中だにゃ(=^・・^=) - ページ {page_num}")
        url = base_url + str(page_num)
        properties = get_property_info(url)
        all_properties.extend(properties)

        total_count += len(properties)

        while len(all_properties) >= 10:
            df = pd.DataFrame(all_properties[:10], columns=['物件名称', '住所', '最寄り駅'])

            output_directory = os.path.join(os.path.expanduser('~'), 'Documents')
            output_file_path = os.path.join(output_directory, f'leopalace_properties_info_{file_count}.csv')

            df.to_csv(output_file_path, index=False, encoding='utf-8-sig')
            print(f"物件情報がCSVファイル '{output_file_path}' に保存されたよ！")
            print(f"CSVファイルに出力した件数: {len(df)}")

            file_count += 1

            all_properties = all_properties[10:]

    if all_properties:
        df = pd.DataFrame(all_properties, columns=['物件名称', '住所', '最寄り駅'])
        output_directory = os.path.join(os.path.expanduser('~'), 'Documents')
        output_file_path = os.path.join(output_directory, f'leopalace_properties_info_{file_count}.csv')
        df.to_csv(output_file_path, index=False, encoding='utf-8-sig')
        print(f"物件情報がCSVファイル '{output_file_path}' に保存されたよ！")
        print(f"CSVファイルに出力した件数: {len(df)}")

    progress_bar['value'] = 100
    root.update_idletasks()
    messagebox.showinfo("情報", "データ取得が完了しました！")

def run_scraper():
    url = url_entry.get()
    if not url:
        messagebox.showwarning("警告", "URLを入力してください。")
        return
    main(url, progress_bar)

def cancel_scraper():
    url_entry.delete(0, tk.END)
    progress_bar['value'] = 0
    root.update_idletasks()

# Tkinter GUIの作成
root = tk.Tk()
root.title("URLを入力してください")

tk.Label(root, text="URL:").pack(padx=10, pady=5)
url_entry = tk.Entry(root, width=50)
url_entry.pack(padx=10, pady=5)

execute_button = tk.Button(root, text="実行", command=run_scraper)
execute_button.pack(padx=10, pady=10)

cancel_button = tk.Button(root, text="取り消し", command=cancel_scraper)
cancel_button.pack(padx=10, pady=10)

progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate")
progress_bar.pack(padx=10, pady=10)

root.mainloop()
